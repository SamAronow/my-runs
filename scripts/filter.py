import json
from shapely.geometry import Point, Polygon
import os

midd_coordinates = [[-72.57495,41.5046],[-72.57413,41.51164],[-72.56323,41.516],[-72.53239,41.55149],[-72.3317,41.62854],[-72.32898,41.63952],[-72.33702,41.64217],[-72.37603,41.63288],[-72.45404,41.60779],[-72.48255,41.64195],[-72.52741,41.6618],[-72.60467,41.64994],[-72.64271,41.60874],[-72.64271,41.59795],[-72.65299,41.58801],[-72.7029,41.58276],[-72.76191,41.58501],[-72.77987,41.55031],[-72.74702,41.50231],[-72.67862,41.4543],[-72.62274,41.46335],[-72.59843,41.49002],[-72.57495,41.5046]]
freeman_coordinates = [[-72.66519,41.55286],[-72.66623,41.55162],[-72.66964,41.55008],[-72.67218,41.54916],[-72.67133,41.54595],[-72.67485,41.54241],[-72.67898,41.5403],[-72.68003,41.53919],[-72.67892,41.53545],[-72.67949,41.5334],[-72.67946,41.53096],[-72.67846,41.5268],[-72.6757,41.52737],[-72.67243,41.52819],[-72.67204,41.53012],[-72.67484,41.5359],[-72.6769,41.53911],[-72.67414,41.53909],[-72.66985,41.54161],[-72.66745,41.54201],[-72.66697,41.54032],[-72.66728,41.53865],[-72.66838,41.53714],[-72.6698,41.53581],[-72.67042,41.53477],[-72.67157,41.53055],[-72.66748,41.53016],[-72.66423,41.5312],[-72.66517,41.53385],[-72.66345,41.53527],[-72.66133,41.53693],[-72.66102,41.53843],[-72.65887,41.544],[-72.65822,41.54578],[-72.65861,41.54804],[-72.65759,41.55117],[-72.65671,41.5523],[-72.65357,41.55328],[-72.65359,41.55401],[-72.65397,41.55609],[-72.65508,41.56056],[-72.65616,41.56096],[-72.65986,41.56006],[-72.6621,41.55942],[-72.66589,41.55858],[-72.66537,41.55663],[-72.66613,41.55462],[-72.66517,41.55288]]

#[[-72.66519,41.55286],[-72.66623,41.55162],[-72.66964,41.55008],[-72.67218,41.54916],[-72.67133,41.54595],[-72.67485,41.54241],[-72.67898,41.5403],[-72.68003,41.53919],[-72.67892,41.53545],[-72.67949,41.5334],[-72.67946,41.53096],[-72.67862,41.52823],[-72.67598,41.52854],[-72.67329,41.52888],[-72.67335,41.53205],[-72.67602,41.53593],[-72.6768,41.53853],[-72.67414,41.53909],[-72.66934,41.54012],[-72.66754,41.53688],[-72.6698,41.53581],[-72.67042,41.53477],[-72.67151,41.53057],[-72.66748,41.53016],[-72.66423,41.5312],[-72.66517,41.53385],[-72.66345,41.53527],[-72.66133,41.53693],[-72.66102,41.53843],[-72.65887,41.544],[-72.65822,41.54578],[-72.65861,41.54804],[-72.65759,41.55117],[-72.65767,41.55353],[-72.6553,41.55348],[-72.65359,41.55401],[-72.65397,41.55609],[-72.65508,41.56056],[-72.65616,41.56096],[-72.65986,41.56006],[-72.6621,41.55942],[-72.66589,41.55858],[-72.66537,41.55663],[-72.66613,41.55462],[-72.66517,41.55288]]
#[[-72.66348,41.55276],[-72.66623,41.55162],[-72.66964,41.55008],[-72.67218,41.54916],[-72.67133,41.54595],[-72.67485,41.54241],[-72.67898,41.5403],[-72.68003,41.53919],[-72.67892,41.53545],[-72.67949,41.5334],[-72.67946,41.53096],[-72.67862,41.52823],[-72.67598,41.52854],[-72.67329,41.52888],[-72.67335,41.53205],[-72.67602,41.53593],[-72.6768,41.53853],[-72.67414,41.53909],[-72.66934,41.54012],[-72.66754,41.53688],[-72.6698,41.53581],[-72.67042,41.53477],[-72.67151,41.53057],[-72.66748,41.53016],[-72.66423,41.5312],[-72.66517,41.53385],[-72.66345,41.53527],[-72.66133,41.53693],[-72.66102,41.53843],[-72.65887,41.544],[-72.65822,41.54578],[-72.65861,41.54804],[-72.65759,41.55117],[-72.65767,41.55353],[-72.6553,41.55348],[-72.65359,41.55401],[-72.65397,41.55609],[-72.65508,41.56056],[-72.65616,41.56096],[-72.65986,41.56006],[-72.6621,41.55942],[-72.66316,41.55828],[-72.66441,41.55604],[-72.66351,41.55274]]
#[[-72.66244,41.5527],[-72.66623,41.55162],[-72.66964,41.55008],[-72.67218,41.54916],[-72.67133,41.54595],[-72.67485,41.54241],[-72.67898,41.5403],[-72.68003,41.53919],[-72.67892,41.53545],[-72.67949,41.5334],[-72.67946,41.53096],[-72.67862,41.52823],[-72.67598,41.52854],[-72.67329,41.52888],[-72.67335,41.53205],[-72.67602,41.53593],[-72.6768,41.53853],[-72.67414,41.53909],[-72.66934,41.54012],[-72.66754,41.53688],[-72.6698,41.53581],[-72.67042,41.53477],[-72.67074,41.53247],[-72.66797,41.53224],[-72.66566,41.53228],[-72.66517,41.53385],[-72.66345,41.53527],[-72.66133,41.53693],[-72.66102,41.53843],[-72.65887,41.544],[-72.65822,41.54578],[-72.65861,41.54804],[-72.65759,41.55117],[-72.65767,41.55353],[-72.6553,41.55348],[-72.65359,41.55401],[-72.65397,41.55609],[-72.65508,41.56056],[-72.65679,41.56035],[-72.65979,41.5592],[-72.66162,41.5587],[-72.66316,41.55828],[-72.66353,41.55629],[-72.66244,41.5527]]
#[[-72.66183,41.55239],[-72.66562,41.55096],[-72.66929,41.5498],[-72.67138,41.5485],[-72.67029,41.54405],[-72.67442,41.54229],[-72.67962,41.5392],[-72.67892,41.53545],[-72.67884,41.53351],[-72.67884,41.53104],[-72.67869,41.52939],[-72.67606,41.52885],[-72.67372,41.52954],[-72.67394,41.53201],[-72.67602,41.53593],[-72.6768,41.53853],[-72.67414,41.53909],[-72.66934,41.54012],[-72.66754,41.53688],[-72.67042,41.53477],[-72.67029,41.53305],[-72.66811,41.5327],[-72.66568,41.53273],[-72.66556,41.53394],[-72.66345,41.53527],[-72.66145,41.53852],[-72.65917,41.54438],[-72.65861,41.54804],[-72.65767,41.55353],[-72.65525,41.55373],[-72.65394,41.55404],[-72.65442,41.55612],[-72.65532,41.56044],[-72.65646,41.56057],[-72.65979,41.5592],[-72.66162,41.5587],[-72.66155,41.55767],[-72.66151,41.55639],[-72.66183,41.55244]]
#[[-72.66199,41.55223],[-72.66414,41.55166],[-72.66554,41.5509],[-72.66941,41.5498],[-72.67137,41.54873],[-72.67075,41.54521],[-72.66786,41.54363],[-72.67184,41.54301],[-72.67511,41.54206],[-72.67926,41.53961],[-72.67822,41.53573],[-72.67916,41.53271],[-72.67792,41.53244],[-72.67701,41.53631],[-72.67753,41.53905],[-72.67483,41.54054],[-72.67125,41.54151],[-72.66734,41.5415],[-72.66785,41.53821],[-72.67061,41.53338],[-72.66728,41.53275],[-72.6655,41.53299],[-72.66357,41.53542],[-72.66172,41.53779],[-72.65883,41.54415],[-72.65794,41.55007],[-72.65815,41.55409],[-72.66192,41.55228]]
#[[-72.66281,41.55217],[-72.66554,41.5514],[-72.66908,41.54977],[-72.67141,41.54833],[-72.66957,41.54441],[-72.66699,41.54127],[-72.67026,41.53494],[-72.67036,41.53323],[-72.66705,41.53261],[-72.66542,41.53357],[-72.66526,41.53481],[-72.66407,41.53504],[-72.66346,41.53585],[-72.66184,41.5371],[-72.66137,41.53863],[-72.65919,41.54423],[-72.65847,41.54805],[-72.65794,41.55146],[-72.65819,41.55408],[-72.66272,41.5522]]
#[[-72.66264,41.55182],[-72.66531,41.55084],[-72.66908,41.54977],[-72.67141,41.54833],[-72.66957,41.54441],[-72.66664,41.54138],[-72.67026,41.53494],[-72.67036,41.53357],[-72.66705,41.53261],[-72.66542,41.53357],[-72.66526,41.53481],[-72.66407,41.53504],[-72.66346,41.53585],[-72.66137,41.53863],[-72.65919,41.54423],[-72.65847,41.54805],[-72.65794,41.55146],[-72.65807,41.55389],[-72.6625,41.55191]]
midd_polygon = Polygon(midd_coordinates)
freeman_polygon = Polygon(freeman_coordinates)

# Function to check if a coordinate is within the bounding box
def within_filter(lon,lat):
    point = Point(lon, lat)
    return midd_polygon.contains(point) and not freeman_polygon.contains(point)

# Read the input JSON file
#names = ["bruce", "calder", "calhoun","chid", "dale", "don", "dylan", "evan", "foge", "george","jude", "kerm", "lara", "levine"
# , "mike", "miles", "mckinney","noah", "owen", "phil", "ratner", "rob", "sam", "taffet", "tony","will", "zallen"]
names =["bruce", "calder", "calhoun","chid", "dale", "don", "dylan", "evan", "foge", "george","jude", "kerm", "lara", "levine", "mike", "miles", "mckinney","noah", "owen", "phil", "ratner", "rob", "sam", "taffet", "tony", "will", "zallen"]
for name in names:
    routes=[]
    print(name)
    file='../people/'+name+".js"
    with open(file, 'r') as infile:
        lines = infile.readlines()[2:]  # Skip the first two lines

    i=0
    for line in lines:
        i=i+1
        # Extract the substring from the 13th character to the third-to-last character
        json_str = line[12:-3]
        try:
            json_obj = json.loads(json_str)
            routes.append(json_obj)
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON on line: {i}")
            print(f"Error message: {e}")

    file_path="../people/wes_"+name+".js"

    with open("temp.js", "w") as file:
        file.write("var routes = new Array(0);\n")  # Initialize the routes array

        for route in routes:
            inside=False
            for cor in route['features'][0]['geometry']['coordinates'][0]:
                lon=cor[0]
                lat=cor[1]
            
                if within_filter(lon, lat):
                    inside=True
            if inside:
                json_str = json.dumps(route)  # Serialize the JSON object
                file.write(f"\nroutes.push({json_str});")

    with open('temp.js', 'r') as file:
        content = file.read()

    content = content.replace('routes', 'wes_'+name)

    with open(file_path, 'w') as file:
        file.write(content)

    os.remove("temp.js")